---
- hosts: localhost
  gather_facts: no
  tasks:
  - add_host:
      host: "{{ target_host }}"
      groups: windows_iautomate
  - include_vars:
        file: servers
        name: key
      no_log: true

   - set_fact:
       snow_db_password: "{{key.pass}}"
       snow_db_username: "{{key.user}}"
       snow_db_ip: "{{key.host}}"

   - include_role:
       name: database_fetch
       tasks_from: fetch_snow_details
     vars:
       snow_db_host: "{{ snow_db_ip }}"
       db_username: "{{ snow_db_username }}"
       db_password: "{{ snow_db_password }}"

   - set_fact:
       username: "{{ snow_username.stdout_lines[2] | regex_replace(' ','') }}"
       password: "{{ snow_pass.stdout_lines[2] | regex_replace(' ','') }}"
       instance_name: "{{ snow_url.stdout_lines[2].split('.')[0].split('//')[1] }}"
       L2_grp: "{{ snow_assign_group.stdout_lines[2] }}"

   - include_role:
       name: database_fetch
       tasks_from: fetch_db_creds
     vars:
        snow_db_host: "{{ snow_db_ip }}"
        db_username: "{{ snow_db_username }}"
        db_password: "{{ snow_db_password }}"

   - set_fact:
       db_user: "{{ sql_username.stdout_lines[2] | regex_replace(' ','') }}"
       db_pass: "{{ sql_password.stdout_lines[2] | regex_replace(' ','') }}"


- hosts: windows
  gather_facts: no
  tasks:
## THIS BLOCK IS CHECKING THE SERVER REACHABILITY ##
  - block:
    - wait_for_connection:
        timeout: 60
    - setup:
    
    - include_role: 
        name: iautomate_update
      vars:
        status_codes: 0
        iautomate_success: "Ansible execution In-Progress" 

    - include_role:
        name: snow_update
        tasks_from: progress
      vars:
        assign_ansible: "Ansible has started working on this ticket"
    rescue:
    - include_role: 
        name: iautomate_update
      vars:
        status_codes: -1
        iautomate_success: "Ansible cannot reach the target server" 
    - include_role:
        name: snow_update
        tasks_from: failure
      vars: 
        failure_closing_note: "Ansible cannot reach the target server"
        L2_group: "{{ L2_grp }}"
    - fail:
        msg: "Ansible Failed to reach the server"
## THIS BLOCK PERFORMS INCIDENT REMEDIATION STEPS ##
  - block:
    - include_role: 
        name: "CheckDBStatusPNP"
      vars:
        username1: "{{ db_user }}"
        password1: "{{ db_pass }}"
        l2_group: "{{ L2_grp }}"
        
    - include_role:
        name: snow_update
        tasks_from: success
      vars:
        resolve_message: "The Database status is: {{ db_status.stdout }}. Hence resolving the ticket"
        success_closing_note: "Incident resolved"
      when: status_code is not defined
    - include_role: 
        name: iautomate_update
      vars:
        status_codes: 1
        iautomate_success: "Ansible successfully performed the remediation steps" 
      when: status_code is not defined
    - include_role: 
        name: iautomate_update
      vars:
        status_codes: 2
        iautomate_success: "Ansible could not resolve the issue hence ticket is transferred"
      when: status_code is defined
    - include_role:
        name: snow_update
        tasks_from: transfer
      vars: 
        failure_closing_note: "Could not get database status,{{ db_status.stderr }} hence transferring the ticket"
        L2_group: "{{ l2_group|default('DryIce_CustomerSupportGroup1') }}"
      when: status_code is defined  ## status_code variable is defined in add_user_linux
    rescue:
    - include_role:
        name: iautomate_update
      vars:
        status_codes: -1
        iautomate_success: "Ansible execution failed on the server" 
    - include_role:
        name: snow_update
        tasks_from: failure
      vars: 
        failure_closing_note: "Ansible execution failed on the server. Incident transferred"
        L2_group: "{{ L2_grp }}"
